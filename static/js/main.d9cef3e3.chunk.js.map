{"version":3,"sources":["Firebase/firebase.js","environment.env.js","Redux/actions/auth.js","services/api.js","Redux/actions/channelActions.js","Redux/reducers/channelReducer.js","Redux/reducers/index.js","Redux/reducers/auth.js","components/Auth/Login.js","components/Navigation/TopMenu/topMenu.js","components/Navigation/SideNav/sideNav.js","components/Auth/ProtectedRoute.js","components/Pantallas/Channel/Channel.js","components/Pantallas/Main/Main.js","components/Pantallas/Room/Room.js","App.js","Root.js","configureStore.js","serviceWorker.js","index.js"],"names":["myFirebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseProviders","auth","GoogleAuthProvider","url","firestore","receiveLogin","user","type","loginUser","dispatch","signInWithPopup","then","window","location","env","catch","error","logoutUser","console","log","signOut","requestHelper","axios","create","baseURL","get","method","data","getChannelsSuccess","createAction","createChannels","connectedChannel","handleActions","state","action","payload","combineReducers","isLoggingIn","isLoggingOut","isVerifying","loginError","logoutError","isAuthenticated","verifyingError","channelReducer","Login","handleSubmit","props","this","userName","onClick","Component","connect","displayName","TopMenu","userPhoto","className","placeholder","showUserMenu","alt","src","photoURL","sideNav","logoutUserAction","id","ProtectedRoute","component","rest","render","to","pathname","from","Channel","joinChannel","roomName","open","image","descripcion","titulo","divStyle","backgroundImage","style","Main","getChannels","channels","map","channel","key","mapDispatchToProps","a","api","response","Room","exact","path","store","persistedState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunkMiddleware","onAuthStateChanged","configureStore","Root","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9cef3e3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDW2mKZntzrDJ5LjVuOYEGcX2-8h2jIgiw\",\r\n    authDomain: \"react-node-mysql.firebaseapp.com\",\r\n    databaseURL: \"https://react-node-mysql.firebaseio.com\",\r\n    projectId: \"react-node-mysql\",\r\n    storageBucket: \"react-node-mysql.appspot.com\",\r\n    messagingSenderId: \"786987374545\",\r\n    appId: \"1:786987374545:web:d471b11e58b73571cff2f0\"\r\n};\r\n\r\nexport const myFirebase = firebase.initializeApp(firebaseConfig);\r\nexport const firebaseProviders = new firebase.auth.GoogleAuthProvider()\r\nconst baseDb = myFirebase.firestore();\r\nexport const db = baseDb;","\r\n\r\nexport const url = 'http://localhost:3006';","import { myFirebase, firebaseProviders } from \"../../Firebase/firebase\";\r\n\r\nimport * as env from '../../environment.env'\r\n\r\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\n\r\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\r\n\r\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\r\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\r\n\r\nconst requestLogin = () => {\r\n    return {\r\n        type: LOGIN_REQUEST\r\n    };\r\n};\r\n\r\nconst receiveLogin = user => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        user\r\n    };\r\n};\r\n\r\nconst loginError = () => {\r\n    return {\r\n        type: LOGIN_FAILURE\r\n    };\r\n};\r\n\r\nconst requestLogout = () => {\r\n    return {\r\n        type: LOGOUT_REQUEST\r\n    };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    };\r\n};\r\n\r\nconst logoutError = () => {\r\n    return {\r\n        type: LOGOUT_FAILURE\r\n    };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n    return {\r\n        type: VERIFY_REQUEST\r\n    };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n    return {\r\n        type: VERIFY_SUCCESS\r\n    };\r\n};\r\n\r\nexport const loginUser = () => dispatch => {\r\n    dispatch(requestLogin());\r\n    myFirebase\r\n        .auth()\r\n        .signInWithPopup(firebaseProviders)\r\n        .then(user => {\r\n            window.location = env.url;\r\n            dispatch(receiveLogin(user));\r\n        })\r\n        .catch(error => {\r\n            //Do something with the error if you want!\r\n            dispatch(loginError());\r\n        });\r\n};\r\n\r\nexport const logoutUser = () => dispatch => {\r\n    console.log('estoy');\r\n    dispatch(requestLogout());\r\n    myFirebase\r\n        .auth()\r\n        .signOut()\r\n        .then(() => {\r\n            window.location = env.url + '/login';\r\n            dispatch(receiveLogout());\r\n        })\r\n        .catch(error => {\r\n            //Do something with the error if you want!\r\n            dispatch(logoutError());\r\n        });\r\n};\r\n\r\nexport const verifyAuth = () => dispatch => {\r\n    dispatch(verifyRequest());\r\n    myFirebase.auth().onAuthStateChanged(user => {\r\n        if (user !== null) {\r\n            dispatch(receiveLogin(user));\r\n        }\r\n        dispatch(verifySuccess());\r\n    });\r\n};","import axios from 'axios';\r\n\r\nconst requestHelper = axios.create({\r\n    baseURL: 'http://localhost:4001'\r\n});\r\n\r\nexport default {\r\n    channels: {\r\n        get: () => requestHelper({\r\n            url: 'channels',\r\n            method: 'GET'\r\n        }),\r\n\r\n        create: data => requestHelper({\r\n            url: 'channels',\r\n            method: 'POST',\r\n            data\r\n        })\r\n    }\r\n};","import { createAction } from 'redux-actions';\r\n\r\nimport api from '../../services/api';\r\n\r\nexport const getChannelsSuccess = createAction('getChannelsSuccess');\r\nexport const createChannels = createAction('createChannels');\r\nexport const connectedChannel = createAction('connectedChannel');\r\n\r\n\r\n\r\nexport const getChannels = () => async (dispatch) => {\r\n    const response = await api.channels.get();\r\n    dispatch(getChannelsSuccess(response.data));\r\n}","import { handleActions } from 'redux-actions';\r\nimport { getChannelsSuccess, createChannels, connectedChannel } from '../actions/channelActions';\r\n\r\nexport default handleActions({\r\n\r\n    [createChannels]: (state, action) => { // Crea un nuevo canal\r\n        return [...state, action.payload];\r\n    },\r\n    [getChannelsSuccess]: (state, action) => { // Devuelve todos los canales\r\n        return action.payload;\r\n    },\r\n    [connectedChannel]: (state, action) => { // Indica si el usuario ya esta conectado a un canal\r\n        return [...state, action.payload];\r\n    }\r\n\r\n\r\n}, []);","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\nimport channelReducer from \"./channelReducer\";\r\n\r\nexport default combineReducers({ auth, channelReducer });","import {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILURE,\r\n    LOGOUT_REQUEST,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE,\r\n    VERIFY_REQUEST,\r\n    VERIFY_SUCCESS\r\n} from \"../actions/\";\r\n\r\nexport default (\r\n    state = {\r\n        isLoggingIn: false,\r\n        isLoggingOut: false,\r\n        isVerifying: false,\r\n        loginError: false,\r\n        logoutError: false,\r\n        isAuthenticated: false,\r\n        user: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case LOGIN_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                loginError: false\r\n            };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            };\r\n        case LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isAuthenticated: false,\r\n                loginError: true\r\n            };\r\n        case LOGOUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: true,\r\n                logoutError: false\r\n            };\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                isAuthenticated: false,\r\n                user: {}\r\n            };\r\n        case LOGOUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                logoutError: true\r\n            };\r\n        case VERIFY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isVerifying: true,\r\n                verifyingError: false\r\n            };\r\n        case VERIFY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isVerifying: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { Component } from 'react';\r\n// Redux\r\nimport { loginUser } from \"../../Redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass Login extends Component {\r\n    state = { auth: \"\" };\r\n    handleSubmit = () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(loginUser());\r\n    };\r\n    render() {\r\n        const { isAuthenticated, userName } = this.props;\r\n        if (isAuthenticated) {\r\n            return (\r\n                <div>\r\n                    INICIADO como {userName}\r\n                    <button onClick={this.handleSubmit}>Iniciar</button>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    NO INICIADO\r\n                    <button onClick={this.handleSubmit}>Iniciar</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isLoggingIn: state.auth.isLoggingIn,\r\n        loginError: state.auth.loginError,\r\n        isAuthenticated: state.auth.isAuthenticated,\r\n        userName: state.auth.user.displayName\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Login);","import React, { Component } from 'react';\r\nimport './topMenu.css';\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\n\r\n// Icons\r\nimport { FaLaptopCode, FaRegEnvelope, FaRegBell } from 'react-icons/fa';\r\n\r\n// http://demo.foxthemes.net/gotubev1/your-watch-later.html#\r\n\r\nclass TopMenu extends Component {\r\n    render() {\r\n        const { userName, userPhoto } = this.props;\r\n        return (\r\n            <div className=\"navTop\">\r\n                <div className=\"navTopCenter\">\r\n                    <div className=\"searchBar\">\r\n                        <div className=\"searchBarIcon\">\r\n                            <FaLaptopCode />\r\n                        </div>\r\n                        <input type=\"text\" placeholder=\"Buscar persona o canal...\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"navTopRight\">\r\n                    <li>\r\n                        <button>\r\n                            {/* <span className=\"badge\">2</span> */}\r\n                            <FaRegBell />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button>\r\n                            {/* <span className=\"badge\">2</span> */}\r\n                            <FaRegEnvelope />\r\n                        </button>\r\n                    </li>\r\n                    <li>\r\n                        <button onClick={this.showUserMenu}>\r\n                            <small>{userName}</small>\r\n                            <img alt=\"user\" src={userPhoto} /> \r\n                        </button>\r\n                    </li>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated,\r\n        userName: state.auth.user.displayName,\r\n        userPhoto: state.auth.user.photoURL\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(TopMenu);","import React, { Component } from 'react';\r\nimport './sideNav.css';\r\n\r\n// Icons\r\nimport { FaLaptopCode, FaCog, FaPowerOff } from 'react-icons/fa';\r\n\r\n// Redux\r\nimport { logoutUser } from '../../../Redux/actions';\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nclass sideNav extends Component {\r\n    logoutUserAction = () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(logoutUser());\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"sideNav\">\r\n                <div className=\"sideNav-title\">\r\n                    Menu\r\n                </div>\r\n                <li id=\"selected\">\r\n                    <FaLaptopCode />\r\n                </li>\r\n                <hr></hr>\r\n                <li>\r\n                    <FaCog />\r\n                </li>\r\n                <li onClick={this.logoutUserAction}>\r\n                    <FaPowerOff />\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isLoggingIn: state.auth.isLoggingIn,\r\n        loginError: state.auth.loginError,\r\n        isAuthenticated: state.auth.isAuthenticated,\r\n        userName: state.auth.user.displayName\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(sideNav);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({\r\n    component: Component,\r\n    isAuthenticated,\r\n    isVerifying,\r\n    ...rest\r\n}) => (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                isVerifying ? (\r\n                    <div />\r\n                ) : isAuthenticated ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                            <Redirect\r\n                                to={{\r\n                                    pathname: \"/login\",\r\n                                    state: { from: props.location }\r\n                                }}\r\n                            />\r\n                        )\r\n            }\r\n        />\r\n    );\r\n\r\nexport default ProtectedRoute;","import React, { Component } from 'react';\r\nimport './Channel.css';\r\n\r\n// Icons\r\nimport { FaLaptopCode } from 'react-icons/fa';\r\n\r\n\r\nclass Channel extends Component {\r\n\r\n    // Join to Channel\r\n    joinChannel = () => {\r\n        const { roomName } = this.props;\r\n        window.open('https://prueba-rtc-multiple.herokuapp.com?roomId=' + roomName);\r\n    }\r\n\r\n    render() {\r\n        const { image, descripcion, titulo } = this.props;\r\n        const divStyle = {backgroundImage: 'url(' + image + ')'};\r\n        return (\r\n            <div className=\"channelBody\" style={divStyle}>\r\n                <div className=\"textChannel\">\r\n                    <h6>{titulo}</h6>\r\n                    <span>{descripcion}</span>\r\n                </div>\r\n                <div className=\"joinChannel\" onClick={this.joinChannel}>\r\n                    <button><FaLaptopCode /> <span>Unirme</span></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Channel;","import React, { Component } from 'react';\r\nimport './Main.css';\r\n\r\nimport Channel from '../Channel/Channel';\r\n\r\n// Redux\r\nimport { getChannels as getChannelsAction } from \"../../../Redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Main extends Component {\r\n\r\n    componentDidMount() {\r\n        const { getChannels } = this.props;\r\n        getChannels();\r\n    }\r\n\r\n\r\n    render() {\r\n        const { channels } = this.props;\r\n        return (\r\n            <div className=\"sideNavComponent\">\r\n                <h3 className=\"title\">\r\n                    Canales\r\n                </h3>\r\n                <div className=\"channelList\">\r\n                    {\r\n                        channels.map(channel => (\r\n                            <Channel\r\n                            key={channel.id}\r\n                            titulo={channel.titulo}\r\n                            descripcion={channel.descripcion}\r\n                            image={channel.image}\r\n                            roomName={channel.roomName}\r\n                            >\r\n\r\n                            </Channel>\r\n                        ))\r\n                    }   \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        channels: state.channelReducer,\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getChannels: getChannelsAction\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, { Component } from 'react';\r\nimport './Room.css';\r\n\r\n// Socket config\r\n\r\n\r\nclass Room extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"RoomComponent\">\r\n                dsaadsdsa\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default (Room);","import React from 'react';\r\nimport './App.css';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n// Redux\r\nimport { connect } from \"react-redux\";\r\n\r\n// Import Components\r\nimport Login from './components/Auth/Login'\r\nimport TopMenu from \"./components/Navigation/TopMenu/topMenu\";\r\nimport SideNav from \"./components/Navigation/SideNav/sideNav\";\r\nimport ProtectedRoute from './components/Auth/ProtectedRoute';\r\nimport Main from \"./components/Pantallas/Main/Main\";\r\nimport Room from \"./components/Pantallas/Room/Room\";\r\n\r\nfunction App(props) {\r\n    const { isAuthenticated, isVerifying } = props;\r\n    return (\r\n        <div>\r\n            {   isAuthenticated ? <TopMenu></TopMenu> : null}\r\n            {   isAuthenticated ? <SideNav></SideNav> : null}\r\n            <Switch>\r\n                {\r\n                    <div>\r\n                    <ProtectedRoute\r\n                    exact\r\n                    path=\"/\"\r\n                    component={Main}\r\n                    isAuthenticated={isAuthenticated}\r\n                    isVerifying={isVerifying}\r\n                />\r\n                <ProtectedRoute\r\n                    exact\r\n                    path=\"/Room\"\r\n                    component={Room}\r\n                    isAuthenticated={isAuthenticated}\r\n                    isVerifying={isVerifying}\r\n                /></div>}\r\n                <Route path=\"/login\" component={Login} />\r\n            </Switch>\r\n            \r\n                    \r\n        </div>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isAuthenticated: state.auth.isAuthenticated,\r\n        isVerifying: state.auth.isVerifying\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);","import React from \"react\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n\r\n// Redux\r\nimport configureStore from \"./configureStore\";\r\n\r\n// Components\r\nimport App from \"./App\";\r\n\r\n\r\nconst store = configureStore();\r\n\r\nfunction Root() {\r\n    return (\r\n        <Provider store={store}>\r\n            <Router>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default Root;","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport { verifyAuth } from \"./Redux/actions\";\r\nimport rootReducer from \"./Redux/reducers\";\r\n\r\n// DevTool\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default function configureStore(persistedState) {\r\n    \r\n    const store = createStore(\r\n        rootReducer,\r\n        persistedState,\r\n        composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n    );\r\n    store.dispatch(verifyAuth());\r\n    return store;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from \"./Root\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Root />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}